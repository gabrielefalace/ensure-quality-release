# Load secrets from Key Vault

#variables:
#  - group: e2e-gov-demo-kv
name: Azure Pipelines

trigger: 
- main

variables:
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  projectRoot: $(System.DefaultWorkingDirectory)
  python.version: '3.7.6'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    
    steps:
    
    - task: AzureKeyVault@2
      inputs:
        azureSubscription: 'Azure subscription 1(efa42e01-27ef-4660-b3e7-2f62a24bd429)'
        KeyVaultName: 'falace-kv'
        SecretsFilter: '*'
        RunAsPreJob: true


    - bash: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --t $ARM_TENANT_ID &&\
        az account show
      displayName: Show logged account
      env:
        ARM_SUBSCRIPTION_ID: $(subscription-id)
        ARM_CLIENT_ID:       $(client-id)
        ARM_CLIENT_SECRET:   $(client-secret)
        ARM_TENANT_ID:       $(tenant-id)
        ARM_ACCESS_KEY:      $(access-key)
        TF_RESOURCE_GROUP: $(resource-group)
        TF_ACCOUNT_NAME:   $(account-name)
        TF_CONTAINER_NAME: $(container-name)
        TF_KEY:           $(key)

    - bash: |
        printenv
      displayName: Show ENV vars
      env:
        ARM_SUBSCRIPTION_ID: $(subscription-id)
        ARM_CLIENT_ID:       $(client-id)
        ARM_CLIENT_SECRET:   $(client-secret)
        ARM_TENANT_ID:       $(tenant-id)
        ARM_ACCESS_KEY:      $(access-key)
        TF_RESOURCE_GROUP: $(resource-group)
        TF_ACCOUNT_NAME:   $(account-name)
        TF_CONTAINER_NAME: $(container-name)
        TF_KEY:           $(key)
  
    - bash: |
        cd terraform &&\
        terraform init \
          -backend-config="resource_group_name=$TF_RESOURCE_GROUP" \
          -backend-config="storage_account_name=$TF_ACCOUNT_NAME" \
          -backend-config="container_name=$TF_CONTAINER_NAME" \
          -backend-config="key=$TF_KEY" \
          -backend-config="access_key=$ARM_ACCESS_KEY" \
          -backend-config=subscription_id="$ARM_SUBSCRIPTION_ID" \
          -backend-config=tenant_id="$ARM_TENANT_ID" \
          -backend-config=client_id="$ARM_CLIENT_ID" \
          -backend-config=client_secret="$ARM_CLIENT_SECRET" &&\
        terraform apply -auto-approve
      displayName: Terraform
      env:
        ARM_SUBSCRIPTION_ID: $(subscription-id)
        ARM_CLIENT_ID:       $(client-id)
        ARM_CLIENT_SECRET:   $(client-secret)
        ARM_TENANT_ID:       $(tenant-id)
        ARM_ACCESS_KEY:      $(access-key)
        TF_RESOURCE_GROUP: $(resource-group)
        TF_ACCOUNT_NAME:   $(account-name)
        TF_CONTAINER_NAME: $(container-name)
        TF_KEY:           $(key)
        
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'path/to/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure subscription 1(efa42e01-27ef-4660-b3e7-2f62a24bd429)'
              appName: ''
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path
