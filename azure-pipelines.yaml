name: Azure Pipelines

trigger: 
- main

variables:
  vmImageName: 'ubuntu-latest'
  projectRoot: $(System.DefaultWorkingDirectory)
  python.version: '3.7.6'

stages:
- stage: Provision
  displayName: Provision Infrastructure
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    
    steps:
    
    - task: AzureKeyVault@2
      inputs:
        azureSubscription: 'Azure subscription 1(efa42e01-27ef-4660-b3e7-2f62a24bd429)'
        KeyVaultName: 'falace-kv'
        SecretsFilter: '*'
        RunAsPreJob: true

    - bash: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --t $ARM_TENANT_ID &&\
        az account show
      displayName: Show logged account
      env:
        ARM_SUBSCRIPTION_ID: $(subscription-id)
        ARM_CLIENT_ID:       $(client-id)
        ARM_CLIENT_SECRET:   $(client-secret)
        ARM_TENANT_ID:       $(tenant-id)
        ARM_ACCESS_KEY:      $(access-key)
        TF_RESOURCE_GROUP: $(resource-group)
        TF_ACCOUNT_NAME:   $(account-name)
        TF_CONTAINER_NAME: $(container-name)
        TF_KEY:           $(key)

    - bash: |
        cd terraform &&\
        terraform init \
          -backend-config="resource_group_name=$TF_RESOURCE_GROUP" \
          -backend-config="storage_account_name=$TF_ACCOUNT_NAME" \
          -backend-config="container_name=$TF_CONTAINER_NAME" \
          -backend-config="key=$TF_KEY" \
          -backend-config="access_key=$ARM_ACCESS_KEY" \
          -backend-config=subscription_id="$ARM_SUBSCRIPTION_ID" \
          -backend-config=tenant_id="$ARM_TENANT_ID" \
          -backend-config=client_id="$ARM_CLIENT_ID" \
          -backend-config=client_secret="$ARM_CLIENT_SECRET" &&\
        terraform apply -auto-approve \
          -var=public_key="$PUB_KEY"
      displayName: Terraform
      env:
        ARM_SUBSCRIPTION_ID: $(subscription-id)
        ARM_CLIENT_ID:       $(client-id)
        ARM_CLIENT_SECRET:   $(client-secret)
        ARM_TENANT_ID:       $(tenant-id)
        ARM_ACCESS_KEY:      $(access-key)
        TF_RESOURCE_GROUP: $(resource-group)
        TF_ACCOUNT_NAME:   $(account-name)
        TF_CONTAINER_NAME: $(container-name)
        TF_KEY:           $(key)
        PUB_KEY: $(pubKey)

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '20.230.98.207'
        sshPublicKey: '$(pubKey)'
        sshKeySecureFile: 'id_rsa'

- stage: Build
  displayName: Build FakeRestAPI
  jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

- stage: DeployAPI
  displayName: Deploy FakeRestAPI
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: $(vmImageName)
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure subscription 1(efa42e01-27ef-4660-b3e7-2f62a24bd429)'
              appName: EnsQuaRel-appType-AppService
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

- stage: IntegrationTests
  displayName: Integration Tests
  jobs:
  - job: RunNewmanTests
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(projectRoot)
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run StarterAPIs.json'
        workingDirectory: 'automatedtesting/postman'

- stage: UITest
  displayName: Selenium UI Funcional Tests
  jobs:
  - job: RunSeleniumTests
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: CmdLine@2
      displayName: Run Selenium Tests
      inputs:
        script: |
          #! /bin/bash              
          sudo apt-get upgrade -y
          sudo apt-get install python3-pip -y
          sudo apt-get install unzip -y
          sudo apt-get install -y chromium-browser=102
          sudo apt-get install chromium-chromedriver=100
          echo "Chromedriver Location"
          export PATH=$PATH:/usr/bin/chromedriver
          which chromedriver
          sudo pip3 install selenium
          sudo pip3 install -U urllib3 requests
          sudo python3 login.py
        workingDirectory: 'automatedtesting/selenium'

- stage: PerformanceTests
  displayName: Performace Tests
  jobs:
  - job: RunJMeterTests
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: CmdLine@2
      displayName: Install JMeter
      inputs:
        script: |
          sudo apt-get install -y jmeter
          touch testresults.jtl
          jmeter -n â€“t Starter.jmx -l testresults.jtl
          cat testresults.jtl
        workingDirectory: $(projectRoot)

# - stage: DeployVM
#   displayName: Deploy VM for tests
#   jobs:
#   - deployment: VMDeploy
#     environment:
#       name:  'TEST'
#       resourceType: VirtualMachine
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: Bash@3
#             inputs:
#               targetType: 'inline'
#               script: |
#                 #! /bin/bash              
#                 sudo apt-get upgrade -y
#                 sudo apt-get install python3-pip -y
#                 sudo apt-get install unzip -y
#                 sudo apt-get install -y chromium-browser
#                 pip3 install selenium
#                 echo 'Hello, ready to work in this virtual machine'
#                 ls -lah
#                 export PATH=$PATH:some/path
